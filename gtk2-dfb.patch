diff --git a/src/callbacks.c b/src/callbacks.c
index d2352b2..137bb31 100644
--- a/src/callbacks.c
+++ b/src/callbacks.c
@@ -64,11 +64,11 @@ cmd_set_geometry() {
             gtk_window_maximize((GtkWindow *)(uzbl.gui.main_window));
         } else {
             /* we used to use gtk_window_parse_geometry() but that didn't work how it was supposed to */
-            ret = XParseGeometry(uzbl.gui.geometry, &x, &y, &w, &h);
-            if(ret & XValue)
-                gtk_window_move((GtkWindow *)uzbl.gui.main_window, x, y);
-            if(ret & WidthValue)
-                gtk_window_resize((GtkWindow *)uzbl.gui.main_window, w, h);
+            //ret = XParseGeometry(uzbl.gui.geometry, &x, &y, &w, &h);
+            //if(ret & XValue)
+            //    gtk_window_move((GtkWindow *)uzbl.gui.main_window, x, y);
+            //if(ret & WidthValue)
+            //    gtk_window_resize((GtkWindow *)uzbl.gui.main_window, w, h);
         }
     }
 
diff --git a/src/uzbl-core.c b/src/uzbl-core.c
index 227e8c6..89178cb 100644
--- a/src/uzbl-core.c
+++ b/src/uzbl-core.c
@@ -1272,14 +1272,14 @@ run_command (const gchar *command, const guint npre, const gchar **args,
 
     GArray *a = g_array_new (TRUE, FALSE, sizeof(gchar*));
     gchar *pid = itos(getpid());
-    gchar *xwin = itos(uzbl.xwin);
+    //gchar *xwin = itos(uzbl.xwin);
     guint i;
     sharg_append(a, command);
     for (i = 0; i < npre; i++) /* add n args before the default vars */
         sharg_append(a, args[i]);
     sharg_append(a, uzbl.state.config_file);
     sharg_append(a, pid);
-    sharg_append(a, xwin);
+    sharg_append(a, "0");
     sharg_append(a, uzbl.comm.fifo_path);
     sharg_append(a, uzbl.comm.socket_path);
     sharg_append(a, uzbl.state.uri);
@@ -1317,7 +1317,7 @@ run_command (const gchar *command, const guint npre, const gchar **args,
         g_error_free (err);
     }
     g_free (pid);
-    g_free (xwin);
+    //g_free (xwin);
     g_array_free (a, TRUE);
     return result;
 }
@@ -2612,12 +2612,12 @@ main (int argc, char* argv[]) {
         struct timeval tv;
         gettimeofday(&tv, NULL);
         srand((unsigned int)tv.tv_sec*tv.tv_usec);
-        uzbl.xwin = rand();
+        //uzbl.xwin = rand();
     } else {
         uzbl.gui.main_window = create_window ();
         gtk_container_add (GTK_CONTAINER (uzbl.gui.main_window), uzbl.gui.vbox);
         gtk_widget_show_all (uzbl.gui.main_window);
-        uzbl.xwin = GDK_WINDOW_XID (GTK_WIDGET (uzbl.gui.main_window)->window);
+        //uzbl.xwin = GDK_WINDOW_XID (GTK_WIDGET (uzbl.gui.main_window)->window);
     }
 
     uzbl.gui.scbar_v = (GtkScrollbar*) gtk_vscrollbar_new (NULL);
@@ -2627,7 +2627,8 @@ main (int argc, char* argv[]) {
     gtk_widget_set_scroll_adjustments ((GtkWidget*) uzbl.gui.web_view, uzbl.gui.bar_h, uzbl.gui.bar_v);
 
     if(!uzbl.state.instance_name)
-        uzbl.state.instance_name = itos((int)uzbl.xwin);
+        uzbl.state.instance_name = "0";
+    //    uzbl.state.instance_name = itos((int)uzbl.xwin);
 
     GString *tmp = g_string_new("");
     g_string_printf(tmp, "%d", getpid());
@@ -2651,7 +2652,8 @@ main (int argc, char* argv[]) {
         if (uzbl.state.socket_id)
             printf("plug_id %i\n", gtk_plug_get_id(uzbl.gui.plug));
         else
-            printf("window_id %i\n",(int) uzbl.xwin);
+            //printf("window_id %i\n",(int) uzbl.xwin);
+            printf("window_id N/A (directfb)\n");
         printf("pid %i\n", getpid ());
         printf("name: %s\n", uzbl.state.instance_name);
         printf("commit: %s\n", uzbl.info.commit);
diff --git a/src/uzbl-core.h b/src/uzbl-core.h
index 5760423..ab8630c 100644
--- a/src/uzbl-core.h
+++ b/src/uzbl-core.h
@@ -14,8 +14,8 @@
 
 #include <glib/gstdio.h>
 #include <gtk/gtk.h>
-#include <gdk/gdkx.h>
-#include <gdk/gdkkeysyms.h>
+//#include <gdk/gdkx.h>
+//#include <gdk/gdkkeysyms.h>
 #include <sys/socket.h>
 #include <sys/stat.h>
 #include <sys/types.h>
@@ -196,7 +196,7 @@ typedef struct {
     Javascript    js;
     Info          info;
 
-    Window        xwin;
+//    Window        xwin;
 } UzblCore;
 
 /* Main Uzbl object */
